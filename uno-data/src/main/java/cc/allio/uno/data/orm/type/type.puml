@startuml
'https://plantuml.com/class-diagram

interface JavaType<T> extends Serializable {
    Class<T> getJavaType();
}

interface SQLType {
    String getName();
    String getVendor();
    Integer getVendorTypeNumber();
}

interface JdbcType extends SQLType {
    int getJdbcCode();
    boolean includeParenthesis();
    boolean isDecimal();
    Long getMaxBytes();
    String getSignature();
    JdbcType setParameterPattern(String pattern);
}

interface DBType {
    String getName();
    DBCategory getCategory();
}

enum DBCategory {
        RELATIONAL, KEY_VALUE, DOCUMENT, TIME_SERIES, GRAPH, SEARCH_ENGINES, OBJECT_ORIENTED
}

class DataType {
    private SQLType sqlType;
    private Integer precision;
    private Integer scale;
}


enum GenericSQLType implements SQLType {
    BIGINT("bigint", Types.BIGINT, 64, null),
    SMALLINT("smallint", Types.SMALLINT, 32, null),
    INTEGER("int", Types.INTEGER, 64, null),
    BIT("bit", Types.BIT, 4, null),
    TINYINT("tinyint", Types.TINYINT, 16, null),
    NUMBER("number", Types.NUMERIC, 12, 2),
    DOUBLE("double", Types.DOUBLE, 12, 2),
    FLOAT("float", Types.FLOAT, 12, 2),
    TIME("time", Types.TIME, 6, null),
    TIMESTAMP("timestamp", Types.TIMESTAMP, null, null),
    DATE("date", Types.DATE, 6, null),
    DECIMAL("DECIMAL", Types.DECIMAL, 6, null),
    CHAR("char", Types.CHAR, 64, null),
    VARCHAR("varchar", Types.VARCHAR, 64, null),
    NVARCHAR("nvarchar", Types.NVARCHAR, 64, null),
    LONGVARCHAR("longvarchar", Types.LONGVARCHAR, 1024, null),
    LONGNVARCHAR("longnvarchar", Types.LONGNVARCHAR, 1024, null),
    VARBINARY("varbinary", Types.VARBINARY, 1024, null),
    LONGVARBINARY("longvarchar", Types.LONGVARBINARY, 2048, null),
    OBJECT("object", Types.JAVA_OBJECT, null, null),
    ARRAY("array", Types.ARRAY, null, null);
}

class ArrayJavaType implements JavaType {}
class BigDecimalJavaType implements JavaType {}

class TypeRegistry {

    private final Map<Class<? extends JavaType<?>>, JavaType<?>> javaTypes;
    private final Map<Integer, JdbcType> jdbcTypes;
    private final Multimap<Integer, JavaType<?>> jdbcTypesMappings;
    private final Multimap<JavaType<?>, Integer> javaTypeMappings;

    Collection<JdbcType> guessJdbcType(Class<?> valueType);
    JavaType<?> guessJavaType(Class<?> valueType);
}

DBCategory *-- DBType : use

JavaType *-- TypeRegistry : use
JdbcType *-- TypeRegistry : use

@enduml